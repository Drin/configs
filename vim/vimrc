""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" .vimrc -- the way it ought to be: Ha. It rhymes!
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Basic Setup
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
behave xterm
set nocompatible          " no compatibility with vi
filetype on               " recognize syntax by file extension
filetype plugin on        " Look at .vim/ftplugin
filetype indent on        " check for indent file
syntax on                 " syntax highlighting

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" indenting
set ai                    " Auto indent
set si                    " smart indenting

set backspace=2           " allow <BS> to go past last insert
set smartcase             " searches are case-sensitive if caps used
set incsearch             " immediately highlight search matches
set noerrorbells          " no beeps on errors
set nomodeline            " prevent others from overriding this .vimrc
set number                " display line numbers
set ruler                 " display row, column and % of document
set showcmd               " show partial commands in the status line
set showmatch             " show matching () {} etc.
set showmode              " show current mode
set wildmenu              " for bash-style tab-completion
set wildmode=longest,list " set the type of the tab-completion

" Settings for autoindentation, comments, and what-have-you

set expandtab             " expand tabs with spaces
set tabstop=3             " <Tab> move three characters
set shiftwidth=3          " >> and << shift 3 spaces
set textwidth=79          " hard wrap at 79 characters
set modeline              " check for a modeline
set softtabstop=3         " see spaces as tabs
set scrolloff=5           " start scrolling when cursor is N lines from edge

" whoa... wtf?
"set nowrap               " don't soft wrap
set wrap                  " linewrap

" turns status line always on and configures it
set laststatus=2
set statusline=%<%f\ %m\ %h%r%=%b\ 0x%B\ \ %l,%c%V\ %P\ of\ %L

" Puts swapfiles in /tmp instead of current directory.
set directory=/var/tmp/vim/swap

" for the saving and loading view files
set viewoptions=folds
set viewdir=/var/tmp/vim/view

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocommands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

   "au BufWinLeave * mkview
   "au BufWinEnter * silent loadview
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color Stuff
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax enable
set background=dark
let g:molokai_original = 1
color molokai
"color darkdrin

" Highlights long lines (Turned off...)
"highlight OverLength term=standout cterm=bold ctermfg=1
"match OverLength /\%91v.\+/

" general language highlighting
au BufNewFile,BufRead,BufEnter *.{c,cpp,h,javascript,java} call CSyntaxAfter()

" gradle
au BufNewFile,BufRead *.gradle set filetype=groovy

" Markdown
au BufRead,BufNewFile *.md set ft=markdown
au BufRead,BufNewFile *.markdown set ft=markdown

" Antlr
au BufRead,BufNewFile *.g set ft=antlr

" Less
au BufRead,BufNewFile *.less set ft=less

" Makefiles
au BufRead,BufNewFile [Mm]akefile* set noet ts=8 sw=8 nocindent list lcs=tab:>-,trail:x

" F#
au BufRead,BufNewFile *.fs set ft=fs

" Text Files
au BufRead,BufNewFile *.txt highlight clear OverLength
"au BufRead,BufNewFile *.txt set textwidth=80

" Template Toolkit Files (for perl dancer)
au BufRead,BufNewFile *.tt set ft=html

" God
au BufRead,BufNewFile *.god set filetype=ruby

" Tex Files
au BufRead,BufNewFile *.tex highlight clear OverLength
au BufRead,BufNewFile *.bib highlight clear OverLength


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Special Key Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Remove trailing spaces from lines w/ F6: http://vim.wikia.com/wiki/Remove_unwanted_spaces
:nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Shawn's code was cool, but this works on all vcs'
:nnoremap <C-b><C-b> :VCSBlame<CR>

" Because we like our line numbers sometimes...
:nnoremap <C-N><C-N> :set invnumber<CR>

" But we don't always wanna wrap
:nnoremap <C-w><C-w> :set invwrap<CR>

" And all the cool kids need to paste
:nnoremap <C-p><C-p> :set invpaste<CR>

" Use the space key to open and close code folds
:vnoremap <space> zf<CR>
:nnoremap <space> zd<CR>

" Toggle spell checking.
:map <f7> :set spell!<cr>

" Clear search buffer with Ctrl+l
:noremap <silent> <c-l> :nohls<cr><c-l>

" Tab mappings
" Tab fun - Tabs can be fun too!
" @author David Patierno
:nnoremap tn :tabnew<CR>
:nnoremap tq :tabclose<CR>
:nnoremap th :tabp<CR>
:nnoremap tl :tabn<CR>

:nnoremap t1 :tabn 1<CR>
:nnoremap t2 :tabn 2<CR>
:nnoremap t3 :tabn 3<CR>
:nnoremap t4 :tabn 4<CR>
:nnoremap t5 :tabn 5<CR>
:nnoremap t6 :tabn 6<CR>
:nnoremap t7 :tabn 7<CR>
:nnoremap t8 :tabn 8<CR>
:nnoremap t9 :tabn 9<CR>

" Window mappings
:nnoremap ek <c-w><Up>
:nnoremap ej <c-w><Down>
:nnoremap eh <c-w><Left>
:nnoremap el <c-w><Right>
:nnoremap er <c-w>r

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen/plugin management
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
execute pathogen#infect()
